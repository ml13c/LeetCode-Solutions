# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
    # Version 1
        # base case for if tree is empty
        if not root:
            return []
        
        # for the left side of the tree
        left_side = self.inorderTraversal(root.left)

        #for the right side
        right_side = self.inorderTraversal(root.right)
        #combine since it is node
        #                   /  \
        #                  L    R
        return left_side + [root.val] + right_side
    # This version visits each node once which is fine so it should lead to time complexity of O(N). However, python 
    # does list concatenation so it actually creates new lists at each step leading to O(N^2) for linked list trees
    # Version 2
    #This version keeps the space equal to the height of the tree and avoids new lists at each step making it better
    # for handling larger trees.
    result, stack = [], []
    current = root

    while current or stack:
        stack.append(current) #add current node/parent
        current = current.left # move to next node/child

        current = stack.pop()
        result.append(current.val)

        current = current.right #move to next node/child on right side

    return result
