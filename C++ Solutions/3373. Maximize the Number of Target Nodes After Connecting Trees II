class Solution {
public:
    vector<int> maxTargetNodes(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {
        auto g1 = build(edges1), g2 = build(edges2);
        int n = g1.size(), m = g2.size();
        vector<int> c1(n, -1), c2(m, -1);
        vector<int> cnt1(2, 0), cnt2(2, 0);

        dfs(g2, 0, c2, cnt2);
        dfs(g1, 0, c1, cnt1);

        int t = max(cnt2[0], cnt2[1]);
        vector<int> ans(n);
        for (int i = 0; i < n; ++i)
            ans[i] = t + cnt1[c1[i]];

        return ans;
    }

private:
    vector<vector<int>> build(const vector<vector<int>>& edges) {
        int n = edges.size() + 1;
        vector<vector<int>> g(n);
        for (const auto& e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        return g;
    }

    void dfs(const vector<vector<int>>& g, int start, vector<int>& c, vector<int>& cnt) {
        stack<pair<int, int>> stk;
        stk.emplace(start, 0);
        c[start] = 0;
        cnt[0]++;

        while (!stk.empty()) {
            auto [a, d] = stk.top(); stk.pop();
            for (int b : g[a]) {
                if (c[b] == -1) {
                    c[b] = d ^ 1;
                    cnt[d ^ 1]++;
                    stk.emplace(b, d ^ 1);
                }
            }
        }
    }
};
