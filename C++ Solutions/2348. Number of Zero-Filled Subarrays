DESCRIPTION:
Given an integer array nums, return the number of subarrays filled with 0.
A subarray is a contiguous non-empty sequence of elements within an array.
Example 1:
Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.

SOLUTION:
class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        int instance_zero = 0;
        long long subarr = 0; // should be long long to match return type
        for (int i = 0; i < nums.size(); i++) { // sizeof fix
            if (nums[i] == 0) {
                instance_zero++;
                subarr += instance_zero;
            }
            else {
                instance_zero = 0;
            }
        }
        return subarr;
    }
};

REASONING: 
We need to count every instance of zero so in our loop every time we see zero we just add it. Next we need to take care of elements that repeat right next to each other(0,0,0).
For this we use a counter and once the index, i != 0, element does not equal zero we set it equal to zero. This takes care of some sub arrays but the issue lies in
increasingly repeating elements. What this means is that as 0,0,0,0... grows so do the amount of cases required to check. To avoid writing seperate cases we use this logic:
As the counter increases so does the instance of sub arrays. By adding the instance counter of consecutive zeros we are able to take care of all subarrays and cases. EX:
0,0,0,1,0
The first three zeroes give us 3 subarr(3 seperaate 0's),1 sub arr (2 consecutive 0's), and 1 sub array(3 consecutive 0's). We can use this trick for the rest of the cases.
