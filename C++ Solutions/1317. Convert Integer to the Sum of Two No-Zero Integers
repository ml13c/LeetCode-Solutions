DESCRIPTION:
No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

Given an integer n, return a list of two integers [a, b] where:

    a and b are No-Zero integers.
    a + b = n

The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.
CODE SOLUTION:
bool hasZero(int x) {
    while (x > 0) {
        if (x % 10 == 0) return true;
        x /= 10;
    }
    return false;
}

class Solution {
public:
    vector<int> getNoZeroIntegers(int n) {
        vector<int> ans;
        for (int i = 1; i < n; i++) {
            int a = i;
            int b = n - i;
            if (!hasZero(a) && !hasZero(b)) {
                ans.push_back(a);
                ans.push_back(b);
                break;
            }
        }
        return ans;
    }
};

SOLUTION:
Question is two sum but there cant be a 0 at all in a or b. You need a function to check if it has zero. The way it works is you do mod 10 to check for zero.
This only works for the last digit or lsb. Then you divide by 10 to iterate to the next place. So for 550 it would go 550-> 55 - > 5. 
